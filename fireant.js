const svg = `<span aria-hidden="true" tabindex="-1" class="bp5-icon bp5-icon-credit-card"><svg data-icon="waterfall-chart" height="16" role="img" viewBox="0 0 16 16" width="16"><path d="M8 7c.55 0 1-.45 1-1s-.45-1-1-1-1 .45-1 1 .45 1 1 1zm-4 4h1c.55 0 1-.45 1-1V8c0-.55-.45-1-1-1H4c-.55 0-1 .45-1 1v2c0 .55.45 1 1 1zm7-6c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1s-1 .45-1 1v1c0 .55.45 1 1 1zm4-3h-1c-.55 0-1 .45-1 1v7c0 .55.45 1 1 1h1c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm0 10H2V3c0-.55-.45-1-1-1s-1 .45-1 1v10c0 .55.45 1 1 1h14c.55 0 1-.45 1-1s-.45-1-1-1z" fill-rule="evenodd"></path></svg></span>`;

function handleRightClickOnRow(stockCode) {
    setTimeout(() => {
        const menu = document.querySelector('.bp5-menu');
        if (menu) {
            if (!menu.querySelector('.custom-analysis-item')) {
                const newItem = document.createElement('li');
                newItem.setAttribute('role', 'none');
                const span = document.createElement('span');
                span.className = "bp5-menu-item-icon";
                span.innerHTML = svg;

                const link = document.createElement('a');
                link.setAttribute('role', 'menuitem');
                link.setAttribute('tabindex', '0');
                link.className = 'bp5-menu-item bp5-popover-dismiss custom-analysis-item';

                const textDiv = document.createElement('div');
                textDiv.className = 'bp5-text-overflow-ellipsis bp5-fill';
                textDiv.textContent = `M·ª©c chi·∫øt kh·∫•u`;
                link.appendChild(span);
                link.appendChild(textDiv);
                newItem.appendChild(link);
                // üîº Ch√®n v√†o ƒë·∫ßu menu
                menu.insertBefore(newItem, menu.firstChild);
                // üñ±Ô∏è G·∫Øn s·ª± ki·ªán click
                link.addEventListener('click', function(e) {
                    e.preventDefault(); // NgƒÉn h√†nh vi m·∫∑c ƒë·ªãnh n·∫øu c·∫ßn
                    runTechnicalAnalysis(stockCode); // G·ªçi h√†m x·ª≠ l√Ω
                });

            }
        } else {
            console.warn('Menu ch∆∞a xu·∫•t hi·ªán!');
        }
    }, 100); // Delay 100ms ƒë·ªÉ ch·ªù menu render
}

async function runTechnicalAnalysis(stockCode) {
    //alert(`üìà ƒêang ph√¢n t√≠ch k·ªπ thu·∫≠t cho m√£: ${stockCode}`);
    await fetchData(stockCode);

}

  document.addEventListener("dblclick", async (event) => {
    console.log(event.target)
    // T√¨m ph·∫ßn t·ª≠ tab ƒë∆∞·ª£c click (ho·∫∑c cha c·ªßa ph·∫ßn t·ª≠ ƒë∆∞·ª£c click)
    const tabButton = event.target.closest(".layout__tab_button");
    if (!tabButton) return;

    // T√¨m ph·∫ßn t·ª≠ ch·ª©a n·ªôi dung m√£ c·ªï phi·∫øu
    const contentDiv = tabButton.querySelector(".layout__tab_button_content");
    if (!contentDiv) return;

    const tabText = contentDiv.textContent.trim();
    const stockCode = tabText.split("(")[0].trim();

    const isValidCode = stockCode === "VNINDEX" || /^[A-Z]{3}$/.test(stockCode);

    if (isValidCode) {
      await fetchData(stockCode);
    }
  }, true);


document.addEventListener('contextmenu', function(event) {
    const targetRow = event.target.closest('.bp5-context-menu');
    if (targetRow) {
        event.preventDefault();

        const stockLink = targetRow.querySelector('a[href*="/charts/content/symbols/"]');
        if (stockLink) {
            const stockCode = stockLink.textContent.trim();
            handleRightClickOnRow(stockCode);
        }
    }
});

var ckht = '';

async function fetchData(code) {
    code = code == "VNINDEX" ? "VN-INDEX" : code;
    const apiUrl = "https://mastrade.masvn.com/api/v1/tradingview/history?symbol=" + code + "&resolution=1D&from=1420070400&to=" + parseInt(Date.parse(getCurrentDate()) / 1000);
    try {
        const response = await fetch(apiUrl);
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        const data = await response.json();
        var ohlc = [],
            closep = [];
        for (var i = 0; i < data.t.length; i += 1) {
            let k = 1000;
            ohlc.push({
                "time": parseInt(data.t[i]),
                "open": parseFloat(data.o[i]),
                "high": parseFloat(data.h[i]),
                "low": parseFloat(data.l[i]),
                "close": parseFloat(data.c[i])
            });
            closep.push({
                "time": data.t[i],
                "value": parseFloat(data.c[i])
            });
        }
        // t√≠nh to√°n drawdown
        var drawdown = findRecoveries(closep);

        var sampleData = [],
            sampleData2 = [];
        for (let i = 1; i < drawdown.length; i++) {
            sampleData.push(drawdown[i].drawdown)
            sampleData2.push(drawdown[i].recover)
        }
        const ci = calculateConfidenceInterval(sampleData);
        const ci2 = calculateConfidenceInterval(sampleData2);

        let table = renderResults(drawdown.slice(-30)); // b·∫£ng d·ªØ li·ªáu
        const mockResult = `M·ª©c chi·∫øt kh·∫•u trung b√¨nh l√† <span style="padding: 2px; color: rgb(0, 170, 0);">${ci.mean.toFixed(2)}%  [${ci.lowerBound.toFixed(2)}, ${ci.upperBound.toFixed(2)}]</span>. M·ª©c h·ªìi ph·ª•c trung b√¨nh l√† <span style="padding: 2px; color: rgb(0, 170, 0);">${ci2.mean.toFixed(2)}% [${ci2.lowerBound.toFixed(2)}, ${ci2.upperBound.toFixed(2)}]</span><br/> ${ckht}</div>${table}`;

        // t√≠nh phi√™n ch·∫°y n∆∞·ªõc r√∫t
        const resultMe = checkLatestGrowth(closep);
        var iframeHtml = `<div class="bp5-callout bp5-intent-none">`;
        if (resultMe.length > 0) {
            iframeHtml += `<div class="bp5-callout bp5-intent-none"><h4  style="padding: 10px;margin: 4px;">üìä Ch√∫ √Ω phi√™n ch·∫°y n∆∞·ªõc r√∫t</h4><ul style="text-align:left;">` + resultMe.map(msg => `<li>${msg}</li>`).join('') + `</ul></div>`;
        }
        console.log(resultMe)
        iframeHtml += `<h4  style="padding: 10px;margin: 4px;">üìä C√°c ƒë·ª£t ƒëi·ªÅu ch·ªânh v√† m·ª©c chi·∫øt kh·∫•u</h4> ` + mockResult;
        showPopup(iframeHtml, code)
    } catch (error) {
        console.error('There has been a problem with your fetch operation:', error);
    }
}

function showPopup(dataHtml, code) {
    // T·∫°o th·∫ª div m·ªõi
    const portalDiv = document.createElement("div");
    portalDiv.className = "bp5-portal";

    portalDiv.innerHTML = `
<div aria-live="polite" class="bp5-overlay bp5-overlay-open bp5-overlay-scroll-container">
    <div class="bp5-overlay-backdrop bp5-overlay-appear-done bp5-overlay-enter-done"></div>
    <div class="bp5-dialog-container bp5-overlay-content bp5-overlay-appear-done bp5-overlay-enter-done" tabindex="0">
        <div class="bp5-dialog" role="dialog" aria-modal="true" aria-labelledby="title-bp-dialog-18" style="width: 890px; height: 600px;">
            <div class="bp5-dialog-header"><span aria-hidden="true" tabindex="-1" class="bp5-icon bp5-icon-application"><svg data-icon="application" height="16" role="img" viewBox="0 0 16 16" width="16">
                        <path d="M3.5 7h7c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-7c-.28 0-.5.22-.5.5s.22.5.5.5zM15 1H1c-.55 0-1 .45-1 1v12c0 .55.45 1 1 1h14c.55 0 1-.45 1-1V2c0-.55-.45-1-1-1zm-1 12H2V5h12v8zM3.5 9h4c.28 0 .5-.22.5-.5S7.78 8 7.5 8h-4c-.28 0-.5.22-.5.5s.22.5.5.5zm0 2h5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-5c-.28 0-.5.22-.5.5s.22.5.5.5z" fill-rule="evenodd"></path>
                    </svg></span>
                <h6 id="title-bp-dialog-18" class="bp5-heading">Ph√¢n t√≠ch m·ª©c chi·∫øt kh·∫•u - ${code}</h6><button type="button" aria-label="Close" class="bp5-button bp5-minimal bp5-dialog-close-button"><span aria-hidden="true" class="bp5-icon bp5-icon-small-cross"><svg data-icon="small-cross" height="16" role="img" viewBox="0 0 16 16" width="16">
                            <path d="M188.2 160L234 205.8C237.8 209.4 240 214.4 240 220C240 231 231 240 220 240C214.4 240 209.4 237.8 205.8 234.2L160 188.2L114.2 234.2C110.6 237.8 105.6 240 100 240C89 240 80 231 80 220C80 214.4 82.2 209.4 85.8 205.8L131.8 160L86 114.2C82.2 110.6 80 105.6 80 100C80 89 89 80 100 80C105.6 80 110.6 82.2 114.2 85.8L160 131.8L205.8 86C209.4 82.2 214.4 80 220 80C231 80 240 89 240 100C240 105.6 237.8 110.6 234.2 114.2L188.2 160z" fill-rule="evenodd" transform="scale(0.05, -0.05) translate(-160, -160)" style="transform-origin: center center;"></path>
                        </svg></span></button>
            </div>
            <div style="display:flex; flex: 1 1 0%; flex-direction: row;" class="sc-jsnFHz eMKivz bp5-dialog-body " >${dataHtml}</div>
        </div>
    </div>
</div>
`;
    const closeButtons = portalDiv.querySelector(".bp5-dialog-close-button");
    closeButtons.addEventListener("click", () => {
        portalDiv.remove();
    });
    // Ch√®n v√†o body ho·∫∑c v·ªã tr√≠ mong mu·ªën
    document.body.appendChild(portalDiv);
}



// ki·ªÉm tra phi√™n n∆∞·ªõc r√∫t
function checkLatestGrowth(data) {
    const DAY = 86400;
    const latest = data[data.length - 1];
    const results = {
        week15: "üìà Gi√° tƒÉng √≠t nh·∫•t 15% trong 1 tu·∫ßn",
        twoWeek20: "üöÄ Gi√° tƒÉng h∆°n 20% trong 2 tu·∫ßn",
        month30_50: "üåü Gi√° tƒÉng trong kho·∫£ng 30‚Äì50% trong 1 th√°ng"
    };
    let messages = {
        week15: results.week15 + " ‚ùå",
        twoWeek20: results.twoWeek20 + " ‚ùå",
        month30_50: results.month30_50 + " ‚ùå"
    };

    let passed = false;

    for (let i = data.length - 2; i >= 0; i--) {
        const deltaDays = (latest.time - data[i].time) / DAY;
        const percent = ((latest.value - data[i].value) / data[i].value) * 100;

        if (deltaDays <= 7 && percent >= 15) {
            messages.week15 = `${results.week15} : <span style="padding: 2px; color: rgb(0, 170, 0);">+${percent.toFixed(2)}%</span>`;
            passed = true;
        }
        if (deltaDays <= 14 && percent > 20) {
            messages.twoWeek20 = `${results.twoWeek20} : <span style="padding: 2px; color: rgb(0, 170, 0);">+${percent.toFixed(2)}%</span>`;
            passed = true;
        }
        if (deltaDays <= 30 && percent >= 30) {
            messages.month30_50 = `${results.month30_50} :<span style="padding: 2px; color: rgb(0, 170, 0);"> +${percent.toFixed(2)}%</span>`;
            passed = true;
        }
    }

    return passed ? Object.values(messages) : [];
}

function calculateMA(data, period) {
    return data.map((_, index) => {
        if (index < period - 1) return null;
        const slice = data.slice(index - period + 1, index + 1);
        const average = slice.reduce((sum, val) => sum + val, 0) / period;
        return average;
    });
}

function formatTimestamp(timestamp) {
    // Chuy·ªÉn ƒë·ªïi timestamp (gi√¢y) sang milliseconds
    const date = new Date(timestamp * 1000);

    // L·∫•y ng√†y, th√°ng v√† nƒÉm
    const day = String(date.getDate()).padStart(2, '0'); // ƒê·∫£m b·∫£o 2 ch·ªØ s·ªë
    const month = String(date.getMonth() + 1).padStart(2, '0'); // Th√°ng b·∫Øt ƒë·∫ßu t·ª´ 0
    const year = String(date.getFullYear()).slice(-2); // L·∫•y 2 ch·ªØ s·ªë cu·ªëi c·ªßa nƒÉm

    // Tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng dd/mm/yy
    return `${day}/${month}/${year}`;
}

function findRecoveries(data) {
    const results = [];
    var ab = data.map(s => s.value);
    var ma10 = calculateMA(ab, 20); // t√≠nh MA10
    let peak = data[0].value; // Gi√° ƒë·ªânh ban ƒë·∫ßu
    let tpeak = data[0].time; // Gi√° ƒë·ªânh ban ƒë·∫ßu
    let trough = data[0].value; // Gi√° ƒë√°y ban ƒë·∫ßu
    let ttrough = data[0].time; // Gi√° ƒë√°y ban ƒë·∫ßu
    let inDecline = false; // Tr·∫°ng th√°i ƒëang s·ª•t gi·∫£m, m·∫∑c ƒë·ªãnh l√† kh√¥ng
    for (let i = 1; i < data.length; i++) {
        if (!inDecline) { // ƒëang tƒÉng
            if (data[i].value < peak) { // B·∫Øt ƒë·∫ßu s·ª•t gi·∫£m
                inDecline = true;
                trough = data[i].value;
                ttrough = data[i].time;
            } else {
                peak = data[i].value; // C·∫≠p nh·∫≠t ƒë·ªânh n·∫øu v·∫´n tƒÉng
                tpeak = data[i].time;
                inDecline = false;
            }
        } else { // ƒëang gi·∫£m 
            if (trough > data[i].value) {
                trough = data[i].value; // C·∫≠p nh·∫≠t ƒë√°y n·∫øu v·∫´n gi·∫£m
                ttrough = data[i].time
                inDecline = true;
            } else {
                if (data[i].value > peak) {
                    peak = data[i].value; // C·∫≠p nh·∫≠t ƒë·ªânh n·∫øu gi√° h·ªìi v∆∞·ª£t ƒë·ªânh (kh√¥ng c√≥ ƒë·ª£t gi·∫£m s√¢u)
                    tpeak = data[i].time;
                    inDecline = false;
                } else {
                    // ƒëi·ªÅu ki·ªán x√°c nh·∫≠n h·ªìi ph·ª•c khi ƒë√°y ·ªü d∆∞·ªõi ma20 v√† gi√° h·ªìi ph·ª•c v∆∞·ª£t ƒë∆∞·ª£c ma20
                   if ((data[i].value > ma10[i] && trough < ma10[i]) || (data.length-i < 6)){ // gi√° v∆∞·ª£t ng∆∞·ª°ng  ph·ª•c h·ªìi ho·∫∑c v∆∞·ª£t MA20
                        const recoveryDate = data[i].time; // Th·ªùi ƒëi·ªÉm h·ªìi ph·ª•c
                        results.push({
                            drawdown: (1 - trough / peak) * 100,
                            start: peak,
                            startDate: formatTimestamp(tpeak),
                            bottom: trough,
                            bottomDate: formatTimestamp(ttrough),
                            recoveryDate: formatTimestamp(recoveryDate),
                            recoveryPrice: data[i].value,
                            recover: 0,
                        });
                        inDecline = false; // X√°c nh·∫≠n h·ªìi ph·ª•c
                        peak = data[i].value; // Reset ƒë·ªânh
                        tpeak = data[i].time; // Reset ƒë·ªânh
                    } else {
                        // ch∆∞a x√°c nh·∫≠n ƒë√£ h·ªìi ph·ª•c, ti·∫øp t·ª•c gi·∫£m
                        inDecline = true;
                    }
                }
            }
        }
    }
    // l·ªçc c√°c ƒë·ª£t drawdown <2% do sideway n·∫±m trong bi√™n ƒë·ªô nh·ªè
    const output = results.filter(item => item.drawdown > 2);
    // t√≠nh m·ª©c h·ªìi ph·ª•c b·∫±ng ƒë·ªânh m·ªõi- ƒë√°y c≈©
    for (i = 0; i < output.length - 1; i++) {
        output[i].recover = 100 * output[i + 1].start / output[i].bottom - 100;
    }
    output[output.length - 1].recover = 100 * peak / output[output.length - 1].bottom - 100; // t√≠nh m·ª©c recover

    ckht = ''; //reset ckht;
    let temp = '';
    // ki·ªÉm tra gi√° tr·ªã m·ªõi nh·∫•t v√† ƒë√°y
    if (data[data.length - 1].value > trough) {
        temp = `ƒê√£ h·ªìi ph·ª•c t·ª´ ng√†y ${formatTimestamp(ttrough)}:<span style="padding: 2px; color: rgb(0, 170, 0);"> ${((data[data.length-1].value/trough-1)*100).toFixed(2)}%</span>. `;
    } else {
        temp = `ƒê√£ tƒÉng t·ª´ ƒë√°y ${output[output.length-1].bottomDate}: <span style="padding: 2px; color: rgb(0, 170, 0);">${output[output.length-1].recover.toFixed(2)}%</span>.`;
    }

    if (data[data.length - 1].value * 1.02 < peak) {
        let gg = ((1 - data[data.length - 1].value / peak) * 100).toFixed(2);
        ckht += ` <span title="ƒêang h·ªìi ph·ª•c sau chi·∫øt kh·∫•u">HI·ªÜN T·∫†I</span> ƒëang chi·∫øt kh·∫•u t·ª´ ƒë·ªânh ${formatTimestamp(tpeak)}: <span style="padding: 2px; color: rgb(0, 170, 0);" >${gg}% </span>.${temp}<br/>${predict(output, gg)}`;
    } else {
        let gg = output[output.length - 1].drawdown.toFixed(2);
        temp = ` ƒê√£ tƒÉng t·ª´ ƒë√°y ${results[results.length-1].bottomDate}: <span style="padding: 2px; color: rgb(0, 170, 0);">${results[results.length-1].recover.toFixed(2)}</span>%.`;
        ckht += `M·ª©c chi·∫øt kh·∫•u c·ªßa <span title="ƒêang xu h∆∞·ªõng tƒÉng ho·∫∑c ƒëi ngang"> ƒë·ªânh g·∫ßn nh·∫•t </span>${output[output.length-1].startDate}: <span style="padding: 2px; color: rgb(0, 170, 0);" >${gg}%</span>.${temp}<br/>${predict(output, gg)}`;
    }

    return output;
}

function calculateConfidenceInterval(data) {
    if (data.length === 0) return null; // Ki·ªÉm tra n·∫øu m·∫£ng tr·ªëng

    const n = data.length;
    const mean = data.reduce((sum, value) => sum + value, 0) / n;

    // T√≠nh ƒë·ªô l·ªách chu·∫©n
    const variance = data.reduce((sum, value) => sum + Math.pow(value - mean, 2), 0) / (n - 1);
    const standardDeviation = Math.sqrt(variance);

    // Sai s·ªë chu·∫©n
    const standardError = standardDeviation / Math.sqrt(n);

    // Gi√° tr·ªã Z cho m·ª©c tin c·∫≠y 95%
    const zScore = 1.96;

    // Kho·∫£ng tin c·∫≠y
    const marginOfError = zScore * standardError;
    const lowerBound = mean - marginOfError;
    const upperBound = mean + marginOfError;

    return {
        mean,
        lowerBound,
        upperBound,
        standardDeviation,
        marginOfError,
        n
    };
}
// v·∫Ω b·∫£ng
function renderResults(results) {
    results.reverse();
    let table = `<div class="bp5-callout bp5-intent-primary PinturaScrollableContent" style="height:530px;width:1320px"><h4 style="padding: 10px;margin: 4px;">üìä B·∫£ng t·ªïng h·ª£p c√°c ƒë·ª£t ƒëi·ªÅu ch·ªânh/h·ªìi ph·ª•c</h4><table id="resultsTable" class="table-screens bp5-html-table bp5-html-table-striped bp5-interactive">
        <thead>
            <tr>
                <th style="text-align: right; white-space: nowrap;">T·∫°o ƒë·ªânh</th>
                <th style="text-align: right; white-space: nowrap;">Gi√°</th>
                <th style="text-align: right; white-space: nowrap;">T·∫°o ƒë√°y</th>
                <th style="text-align: right; white-space: nowrap;">Gi√°</th>
                <th style="text-align: right; white-space: nowrap;">Chi·∫øt kh·∫•u</th>
                <th style="text-align: right; white-space: nowrap;">H·ªìi ph·ª•c</th>
            </tr>
        </thead>
        <tbody>`;

    results.forEach(result => {
        table += `<tr>
            <td style="text-align: right;">${result.startDate}</td>
            <td style="text-align: right;">${result.start.toFixed(2)}</td>
            <td style="text-align: right;">${result.bottomDate}</td>
            <td style="text-align: right;">${result.bottom.toFixed(2)}</td>
            <td style="text-align: right;">${result.drawdown.toFixed(2)} %</td>
            <td style="text-align: right;">${result.recover.toFixed(2)} %</td>
        </tr>`;
    });

    table += `</tbody></table></div>`;
    return table;

}

function getCurrentDate() {
    const t = new Date;
    return t.getFullYear() + "-" + String(t.getMonth() + 1)
        .padStart(2, "0") + "-" + String(t.getDate())
        .padStart(2, "0")
}


//D·ª± b√°o
function predict(data, dropValue) {
    // T√≠nh to√°n h·ªìi quy tuy·∫øn t√≠nh
    function calculateRegression(data) {
        const n = data.length;
        // T√≠nh trung b√¨nh c·ªßa x (drop) v√† y (recovery)
        const meanX = data.reduce((sum, point) => sum + point.drawdown, 0) / n;
        const meanY = data.reduce((sum, point) => sum + point.recover, 0) / n;

        // T√≠nh Covariance v√† Variance
        let covariance = 0;
        let varianceX = 0;

        data.forEach(point => {
            covariance += (point.drawdown - meanX) * (point.recover - meanY);
            varianceX += Math.pow(point.drawdown - meanX, 2);
        });

        // T√≠nh slope (a) v√† intercept (b)
        const slope = covariance / varianceX;
        const intercept = meanY - slope * meanX;

        return {
            slope,
            intercept
        };
    }

    // D·ª± b√°o m·ª©c h·ªìi ph·ª•c
    function predictRecovery(drop, model) {
        const {
            slope,
            intercept
        } = model;
        return slope * drop + intercept;
    }

    // X√¢y d·ª±ng m√¥ h√¨nh h·ªìi quy
    const model = calculateRegression(data);

    // Chu·∫©n b·ªã d·ªØ li·ªáu cho bi·ªÉu ƒë·ªì
    const scatterData = data.map(point => ({
        x: point.drawdown,
        y: point.recover
    }));
    const regressionLine = [];
    for (let x = Math.min(...data.map(d => d.drawdown)) - 0; x <= Math.max(...data.map(d => d.drawdown)) + 5; x += 1) {
        regressionLine.push({
            x: x,
            y: predictRecovery(x, model)
        });
    }

    function findRecoveryLevel(recoveryArray) {
        recoveryArray = recoveryArray.filter(obj => obj.drawdown >= dropValue);
        recoveryArray.sort((a, b) => a.recover - b.recover);
        const index = Math.ceil(recoveryArray.length * 0.1);
        //console.log(recoveryArray, index)
        return recoveryArray[index];
    }
    let probabilitys = findRecoveryLevel(data).recover

    function calculateCorrelation(x, y) {
        const n = x.length;
        const sumX = x.reduce((a, b) => a + b, 0);
        const sumY = y.reduce((a, b) => a + b, 0);
        const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
        const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);
        const sumY2 = y.reduce((sum, yi) => sum + yi * yi, 0);
        const numerator = (n * sumXY) - (sumX * sumY);
        const denominator = Math.sqrt((n * sumX2 - sumX * sumX) * (n * sumY2 - sumY * sumY));
        return numerator / denominator;
    }

    function linearRegression(x, y) {
        const n = x.length;
        const sumX = x.reduce((a, b) => a + b, 0);
        const sumY = y.reduce((a, b) => a + b, 0);
        const sumXY = x.reduce((sum, xi, i) => sum + xi * y[i], 0);
        const sumX2 = x.reduce((sum, xi) => sum + xi * xi, 0);
        const slope = (n * sumXY - sumX * sumY) / (n * sumX2 - sumX * sumX);
        const intercept = (sumY - slope * sumX) / n;
        return {
            slope,
            intercept
        };
    }

    function tTestCorrelation(r, n) {
        const t = r * Math.sqrt((n - 2) / (1 - r * r));
        return t;
    }

    function isSignificant(tValue, df, alpha = 0.05) {
        const criticalValue = 2.306;
        return Math.abs(tValue) > criticalValue ? 'c√≥' : 'kh√¥ng';
    }
    // t∆∞∆°ng quan
    const dropLevels = data.map(d => d.drawdown);
    const recoveryLevels = data.map(d => d.recover);

    const correlation = calculateCorrelation(dropLevels, recoveryLevels);
    const regression = linearRegression(dropLevels, recoveryLevels);
    const tValue = tTestCorrelation(correlation, dropLevels.length);
    const df = dropLevels.length - 2;
    const significant = isSignificant(tValue, df);

    return `<i>M·ª©c h·ªìi ph·ª•c d·ª± b√°o l√†:<span style="padding: 2px; color: rgb(0, 170, 0);"> ${probabilitys.toFixed(2)}% </span>(xs 90%)</i><br/>------<br/>H·ªá s·ªë t∆∞∆°ng quan: ${correlation.toFixed(2)}. H·ªá s·ªë h·ªìi quy: Slope = ${regression.slope.toFixed(2)}, Intercept = ${regression.intercept.toFixed(2)}. Gi√° tr·ªã t: ${tValue.toFixed(2)}, M·ªëi t∆∞∆°ng quan ${significant} √Ω nghƒ©a th·ªëng k√™.<br/>`;
}